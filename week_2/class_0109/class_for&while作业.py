#-*-coding:utf-8-*-

# 课后循环作业

# 1.利用while循环 完成1-100的整数数字相加和
# i=1 #从1开始相加
# sum=0 #记录数字和初始为0
# while i<101: #循环相加100个数
#     sum+=i #求和
#     i+=1 #每循环一次，次数加1
# print('1-100的整数数字之和为：{}'.format(sum)) #输出求和结果



# 2.利用for循环 完成1-10的整数数字相加和
# 方法1：
# sum=0 #定义数字之和初始为0
# for i in range(1,11): #对1到10的整数进行遍历
#     sum+=i #对遍历的值进行求和
# print('1-10的整数数字之和：{}'.format(sum)) #输出求和结果


# # 方法2：
# sum=0 #定义数字之和初始为0
# for i in [1,2,3,4,5,6,7,8,9,10]: #对存储1到10的整数的列表进行遍历
#     sum+=i #对遍历的值进行求和
# print('1-10的整数数字之和：{}'.format(sum))  # 输出求和结果


# 3：利用for循环输出如下三角形
# *
# **
# ***
# ****
# *****
# 方法1：
# s='*' #定义一个*
# i=1 #循环次数初始为1
# while i<6: #连续循环5次
#     print(i*s) #每循环一次打印一次*
#     i += 1 #循环一次，次数递增1个

#方法2：
# s='*' #定义一个*
# for i in [1,2,3,4,5]: #i遍历列表的元素从1到5
#     print(i*s) #打印列表元素和*的相乘

# 方法3 range函数 range(m,n,k) m和k可以不写，m默认为0，k默认为1
# range(n)，m默认为0，k默认为1
# range(m,n)，k默认为1
# for i in range(1,6):
#     print('*'*i)


# 4：请用嵌套for循环输出如下等边三角形（三个边均为5个*）
#        *
#      *  *
#    *  *   *
#   *  *  *  *
# *  * *  *  *  *
# 方法1：
# s=' ' #把倒三角形前面的定义为空格
# x='* ' #定义单个元素
# for i in [4,3,2,1,0]: #遍历空格个数从4个到0个
#     print(i*s+(5-i)*x) #输出固定规律的空格数和星号数
#
# # 方法2：
# s=' ' #把倒三角形前面的定义为空格
# x=' * ' #定义单个元素
# i=4  #循环初始值为4
# while i>=0: #i循环从4到0
#     print(i*s+(5-i)*x) #打印空格个数递减，星号个数递增，总个数和为5
#     i-=1 #每次循环i递减

# 方法3：嵌套for循环
# for i in [1,2,3,4,5]:
#     for j in range(5-i):
#         print('@',end='')
#     print(i * '* ')

# 5:输出99乘法表
# 1*1=1
# 1*2=2 2*2=4
# 1*3=3 2*3=6 3*3=3
# 1*4=4 2*4=8 3*4=12 4*4=16
# 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25
# 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36
# for i in range(1,10): #第二位乘数
#     for j in range(1,i+1):
#         a=i*j
#         print('{}*{}={} '.format(j,i,a),end='')
#     print()


# 方法2：
# for i in [1,2,3,4,5,6,7,8,9]:
#     for j in range(1,i+1):
#         res=i*j
#         print('{}*{}={} '.format(j,i,res),end='')
#     print()

# 方法1：
# for i in [1,2,3,4,5,6,7,8,9]: #定义乘法表的第二个数字取值遍历
#     for j in [1,2,3,4,5,6,7,8,9]: #定义乘法表第一个数字取值遍历
#         if i>=j: #判断必须第二个数字大于等于第一个数字时，才可以执行输出
#             res=i*j #乘法结果
#             print('{}*{}={} '.format(j,i,res),end='') #输出乘法表,第二个数字i相同时取消换行
#     print()
# print('') #j相同时才换行

#***6:利用for循环，完成a=[1,7,4,89,34,2]的冒泡排序：
#***冒泡排序：小的排前面，大的排后面。
a=[1,7,4,89,34,2]
c=0
for i in range(5):
    for i in range(5):
        if a[i]>a[i+1]:
            c=a[i] # 也可写成：a[i],a[i+1]=a[i+1],a[i]
            a[i]=a[i+1]
            a[i+1]=c
print(a)

# 方法1：引入中间变量c=a a=b b=c完成两个元素之间的替换
# a=[1,7,4,89,34,2]
# z=0 #引入第三方变量，用于后面的前后元素交换
# for i in [0,1,2,3,4]:
#     for i in [0,1,2,3,4]: #遍历列表元素
#         if a[i]>a[i+1]: #判断前面的元素比后面的元素小的情况
#             z=a[i]
#             a[i] = a[i + 1]
#             a[i+1]=z #交换前后元素
# print(a) #打印最终排序结果

# 方法2：元素交换
# a=[1,7,4,89,34,2]
# for i in range(5): #或者写成 for i in range(len(a)-1) 冒泡排序最多会执行n-1次，n是元素的个数
#     for i in range(5): #或者写成 for i in range(len(a)-1) 遍历比大小排序一遍
#         if a[i]>a[i+1]:
#             a[i],a[i+1]=a[i+1],a[i]
# print(a)

# 方法3：列表的内置函数
# a=[1,7,4,89,34,2]
# a.sort(reverse=True)
# print(a)


# 7:有1 2 3 4 这四个数字，能组成多少个互不相同且无重复数字的三位数？分别是什么？
# count=0 #定义变量统计符合要求的数字个数，初始为0
# 方法1：
# count=0
# for i in range(1,5): #i代表个位 也可以写成：for i in [1,2,3,4,5]
#     for j in range(1,5): #j代表十位 也可以写成 for j in [1,2,3,4,5]
#         for k in range(1,5): #k代表百位 也可以写成 for k in [1,2,3,4,5]
#             if i!=j and j!=k and i!=k:
#                 count+=1
#                 print('{}'.format(k*100+j*10+i))
# print('一共可以组成{}个不同的三位数!'.format(count))
# 方法2：
# count=0 #记录符合条件的数字个数
# L=[] #存储符合条件的数字
# for i in [1,2,3,4]: #个位
#     for j in [1, 2, 3, 4]: #十位
#         for k in [1, 2, 3, 4]: #百位
#             if i != j and j != k and i != k:
#                 count+=1
#                 a=k * 100 + j * 10 + i
#                 L.append(a)
# print('一共可以组成{}个不同的三位数!如下所示：'.format(count))
# print(L)


# 8:求 0—7 所能组成的奇数个数

# count=0 #定义变量统计符合要求的数字个数
# s=0 #定义每组相同位数的符合要求的数字之和初始为0
# for i in range(7777778):
#     if '8' not in str(i) and '9' not in str(i): #强制转成字符串
#         if i % 2 != 0:
#             s+=1
# print('奇数个数是：{}'.format(s))


# 9:购物车程序 需求：
# 1：启动程序后，让用户在控制台输入工资，然后打印商品信息
# （随便你们自己用什么方式存储商品，记得要有商品的编号、名称以及价格）
# 2：允许用户根据商品编号购买商品
# 3：用户选择商品后，监测余额是否足够，如果足够就直接扣款，
# 不够就提醒用户，不能购买这个商品。
# 4：可随时退出，退出后，打印已购买商品和余额

# salary=input('请输入你的工资：')
# goods={'1':['iphone',8800],
#        '2':['xiaomi',2600],
#        '3':['辣条',5],
#        '4':['mac pro',1100]}
# for item in goods:
#        print('您可以选购的商品是：{}：{}'.format(item,goods[item]))
# total=0
# while True:
#        good_id=input('请输入想购买的商品编号：')
#        if good_id in goods:
#               total += goods[good_id][1]
#               if total<=int(salary):
#                      print('您选择的商品是：{}'.format(goods[good_id][0]))
#                      print('您购买的价格是：{}'.format(goods[good_id][1]))
#                      print('您账户剩余金额是：{}'.format(int(salary)-total))
#               else:
#                      print('你的账户余额不足，请充值！')
#                      break
#        elif good_id=='n':
#               print('退出系统')
#               break
#        else:
#               print('您输入的商品id不存在！')
#               continue










# 控制台输入工资
salary_1=input('请输入您的工资：')
#判断工资是否输入数字
if salary_1.isdigit():
    salary=int(salary_1)
    info='''
        ____________________商品信息____________________
        1.手机 500
        2.生活用品 400
        3.家居 300
        4.电器 100
        '''
    print(info) #打印商品信息
    #存储商品信息
    product_list={'1':['手机','500'],'2':['生活用品','400'],
                  '3':['家居','300'],'4':['电器','100']}
    # 输入选择
    id_1=input('请输入您的选择（您可以输入商品编号或者输入q退出）: ')
    if id_1.isdigit(): #判断选择输入是数字的情况
        if id_1 in product_list.keys(): #判断输入编号存在
            print(product_list[id_1])
            price=int(product_list[id_1][1])
            if price<=salary: #判断余额是否足够
                salary-=price #购买商品后账户余额计算
                print('恭喜您购买{}成功，目前您账户余额为{}'.format(product_list[id_1][0],salary)) #购买成功提示
            else: #余额不足，无法购买
                print('抱歉，您的余额不足无法购买，请及时充值！')
        else: #输入的商品编号不存在
            print('抱歉，您输入的商品编号不存在，请重新输入！')

    elif id_1=='q': #选择退出
        print('您当前余额为：{}，欢迎再来！'.format(salary)) #打印当前余额
        exit()
    else: #选择输入错误
        print('输入错误，请重新输入！')
#判断工资输入非数字提示
else:
    print('您的工资输入有误，请重新输入！')








#存储商品信息
# d={'001':['毛巾1','11元'],'002':['毛巾2','12元'],'003':['毛巾3','13元'],'004':['毛巾4','14元']}
# id=str(input('请输入商品的编号：')) #定义商品编号
# if id in d.keys(): #根据用户输入id判断是否存在
#     print(d[id]) #商品存在，输出对应商品信息
# else: #判断商品不存在
#     print('很抱歉，没有您要找的商品！') #不存在时输出信息